// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/kl09/users"
	"github.com/oklog/ulid/v2"
	"sync"
	"time"
)

// Ensure, that UserServiceMock does implement users.UserService.
// If this is not the case, regenerate this file with moq.
var _ users.UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of users.UserService.
//
//     func TestSomethingThatUsesUserService(t *testing.T) {
//
//         // make and configure a mocked users.UserService
//         mockedUserService := &UserServiceMock{
//             ByIDFunc: func(ctx context.Context, id ulid.ULID) (users.User, error) {
// 	               panic("mock out the ByID method")
//             },
//             CreateFunc: func(ctx context.Context, u users.User) (users.User, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(ctx context.Context, id ulid.ULID) error {
// 	               panic("mock out the Delete method")
//             },
//             SearchFunc: func(ctx context.Context, country string, since time.Time, until time.Time, limit int, orderASC bool) ([]users.User, error) {
// 	               panic("mock out the Search method")
//             },
//             UpdateFunc: func(ctx context.Context, id ulid.ULID, u users.User) (users.User, error) {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedUserService in code that requires users.UserService
//         // and then make assertions.
//
//     }
type UserServiceMock struct {
	// ByIDFunc mocks the ByID method.
	ByIDFunc func(ctx context.Context, id ulid.ULID) (users.User, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, u users.User) (users.User, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id ulid.ULID) error

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, country string, since time.Time, until time.Time, limit int, orderASC bool) ([]users.User, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id ulid.ULID, u users.User) (users.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// ByID holds details about calls to the ByID method.
		ByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID ulid.ULID
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U users.User
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID ulid.ULID
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Country is the country argument value.
			Country string
			// Since is the since argument value.
			Since time.Time
			// Until is the until argument value.
			Until time.Time
			// Limit is the limit argument value.
			Limit int
			// OrderASC is the orderASC argument value.
			OrderASC bool
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID ulid.ULID
			// U is the u argument value.
			U users.User
		}
	}
	lockByID   sync.RWMutex
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockSearch sync.RWMutex
	lockUpdate sync.RWMutex
}

// ByID calls ByIDFunc.
func (mock *UserServiceMock) ByID(ctx context.Context, id ulid.ULID) (users.User, error) {
	callInfo := struct {
		Ctx context.Context
		ID  ulid.ULID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockByID.Lock()
	mock.calls.ByID = append(mock.calls.ByID, callInfo)
	mock.lockByID.Unlock()
	if mock.ByIDFunc == nil {
		var (
			out1 users.User
			out2 error
		)
		return out1, out2
	}
	return mock.ByIDFunc(ctx, id)
}

// ByIDCalls gets all the calls that were made to ByID.
// Check the length with:
//     len(mockedUserService.ByIDCalls())
func (mock *UserServiceMock) ByIDCalls() []struct {
	Ctx context.Context
	ID  ulid.ULID
} {
	var calls []struct {
		Ctx context.Context
		ID  ulid.ULID
	}
	mock.lockByID.RLock()
	calls = mock.calls.ByID
	mock.lockByID.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *UserServiceMock) Create(ctx context.Context, u users.User) (users.User, error) {
	callInfo := struct {
		Ctx context.Context
		U   users.User
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			out1 users.User
			out2 error
		)
		return out1, out2
	}
	return mock.CreateFunc(ctx, u)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedUserService.CreateCalls())
func (mock *UserServiceMock) CreateCalls() []struct {
	Ctx context.Context
	U   users.User
} {
	var calls []struct {
		Ctx context.Context
		U   users.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *UserServiceMock) Delete(ctx context.Context, id ulid.ULID) error {
	callInfo := struct {
		Ctx context.Context
		ID  ulid.ULID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	if mock.DeleteFunc == nil {
		var (
			out1 error
		)
		return out1
	}
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedUserService.DeleteCalls())
func (mock *UserServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  ulid.ULID
} {
	var calls []struct {
		Ctx context.Context
		ID  ulid.ULID
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *UserServiceMock) Search(ctx context.Context, country string, since time.Time, until time.Time, limit int, orderASC bool) ([]users.User, error) {
	callInfo := struct {
		Ctx      context.Context
		Country  string
		Since    time.Time
		Until    time.Time
		Limit    int
		OrderASC bool
	}{
		Ctx:      ctx,
		Country:  country,
		Since:    since,
		Until:    until,
		Limit:    limit,
		OrderASC: orderASC,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	if mock.SearchFunc == nil {
		var (
			out1 []users.User
			out2 error
		)
		return out1, out2
	}
	return mock.SearchFunc(ctx, country, since, until, limit, orderASC)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//     len(mockedUserService.SearchCalls())
func (mock *UserServiceMock) SearchCalls() []struct {
	Ctx      context.Context
	Country  string
	Since    time.Time
	Until    time.Time
	Limit    int
	OrderASC bool
} {
	var calls []struct {
		Ctx      context.Context
		Country  string
		Since    time.Time
		Until    time.Time
		Limit    int
		OrderASC bool
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *UserServiceMock) Update(ctx context.Context, id ulid.ULID, u users.User) (users.User, error) {
	callInfo := struct {
		Ctx context.Context
		ID  ulid.ULID
		U   users.User
	}{
		Ctx: ctx,
		ID:  id,
		U:   u,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			out1 users.User
			out2 error
		)
		return out1, out2
	}
	return mock.UpdateFunc(ctx, id, u)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedUserService.UpdateCalls())
func (mock *UserServiceMock) UpdateCalls() []struct {
	Ctx context.Context
	ID  ulid.ULID
	U   users.User
} {
	var calls []struct {
		Ctx context.Context
		ID  ulid.ULID
		U   users.User
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
