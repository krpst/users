// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"database/sql"
	"github.com/kl09/users"
	"sync"
)

// Ensure, that StorageMock does implement users.Storage.
// If this is not the case, regenerate this file with moq.
var _ users.Storage = &StorageMock{}

// StorageMock is a mock implementation of users.Storage.
//
//     func TestSomethingThatUsesStorage(t *testing.T) {
//
//         // make and configure a mocked users.Storage
//         mockedStorage := &StorageMock{
//             TransactFunc: func(ctx context.Context, atomic func(*sql.Tx) error) error {
// 	               panic("mock out the Transact method")
//             },
//         }
//
//         // use mockedStorage in code that requires users.Storage
//         // and then make assertions.
//
//     }
type StorageMock struct {
	// TransactFunc mocks the Transact method.
	TransactFunc func(ctx context.Context, atomic func(*sql.Tx) error) error

	// calls tracks calls to the methods.
	calls struct {
		// Transact holds details about calls to the Transact method.
		Transact []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Atomic is the atomic argument value.
			Atomic func(*sql.Tx) error
		}
	}
	lockTransact sync.RWMutex
}

// Transact calls TransactFunc.
func (mock *StorageMock) Transact(ctx context.Context, atomic func(*sql.Tx) error) error {
	callInfo := struct {
		Ctx    context.Context
		Atomic func(*sql.Tx) error
	}{
		Ctx:    ctx,
		Atomic: atomic,
	}
	mock.lockTransact.Lock()
	mock.calls.Transact = append(mock.calls.Transact, callInfo)
	mock.lockTransact.Unlock()
	if mock.TransactFunc == nil {
		var (
			out1 error
		)
		return out1
	}
	return mock.TransactFunc(ctx, atomic)
}

// TransactCalls gets all the calls that were made to Transact.
// Check the length with:
//     len(mockedStorage.TransactCalls())
func (mock *StorageMock) TransactCalls() []struct {
	Ctx    context.Context
	Atomic func(*sql.Tx) error
} {
	var calls []struct {
		Ctx    context.Context
		Atomic func(*sql.Tx) error
	}
	mock.lockTransact.RLock()
	calls = mock.calls.Transact
	mock.lockTransact.RUnlock()
	return calls
}
